// Define LOG_MESSAGES to a serial port to send SPE errors messages to. Do not use the same Serial port as SPE
//#define LOG_MESSAGES Serial

%%Display%%.DefineResetLine ;      // *Replaced* at compile time with define for reset line connected to the display
%%Display%%.DefineDisplaySerialx ; // *Replaced* at compile time with define the Serial Port connected to the display

#include "PowerPacketInterface1Const.h"

%%Display%%.IncludeSerial_4DLib ;          // *Replaced* at compile time with an Include the Serial Library relevant to the display
#include "%%Display%%.Processor_LedDigitsDisplay.h"
%%Display%%.IncludeSerial_Const4D ;        // *Replaced* at compile time with an Include the Constants file relevant to the display

%%Display%%.AssignDisplaySerialtoLibrary ; // *Replaced* at compile time with an Assign of the correct Serial port to the correct library

#define ESP_DEBUG
// Uncomment to use ESP8266
#define ESPRESET 17
#include <SoftwareSerial.h>
#define ESPserial SerialS
SoftwareSerial SerialS(8, 9) ;
// Uncomment next 2 lines to use ESP8266 with ESP8266 library from https://github.com/itead/ITEADLIB_Arduino_WeeESP8266
#include "ESP8266.h"
ESP8266 wifi(SerialS,19200);

int loops = 0;                                 //a counter for testing
String ATresponse ;

#define SSID "GTSystemError"      //name of wireless access point to connect to
#define PASSWORD "6789243839"  //wifi password
#define IP "184.106.153.149"                   // thingspeak.com

//String GET = "GET /update?key=F1VP0YS81ID5MDLS&field1=";
String GET_start = "GET /update?key=";
//go to www.Thingspeak.com and sign up to get the writeAPIKey
String writeAPIKey = "YRXQJ0ODEVWE0GL9";       //"F1VP0YS81ID5MDLS" add your writeAPIKey from thingspeak
String GET_end1 =  "&field1=";                 // field1 for the voltage
String GET_end2 =  "&field2=";                 // field2 for the current

String GET = GET_start + writeAPIKey + GET_end1 ;



// routine to handle Serial errors
void mycallback(int ErrCode, unsigned char Errorbyte)
{
#ifdef LOG_MESSAGES
  const char *Error4DText[] = {"OK\0", "Timeout\0", "NAK\0", "Length\0", "Invalid\0"} ;
  LOG_MESSAGES.print(F("Serial 4D Library reports error ")) ;
  LOG_MESSAGES.print(Error4DText[ErrCode]) ;
  if (ErrCode == Err4D_NAK)
  {
    LOG_MESSAGES.print(F(" returned data= ")) ;
    LOG_MESSAGES.println(Errorbyte) ;
  }
  else
    LOG_MESSAGES.println(F("")) ;
  while (1) ; // you can return here, or you can loop
#else
  // Pin 13 has an LED connected on most Arduino boards. Just give it a name
#define led 13
  while (1)
  {
    digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
    delay(200);                // wait for a second
    digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
    delay(200);                // wait for a second
  }
#endif
}
// end of routine to handle Serial errors

word hndl ;

int sensorPin = A0;                         //Vout of LM35 is connected to A0 of Arduino host

void setup()
{
// Ucomment to use the Serial link to the PC for debugging
//  Serial.begin(115200) ;        // serial to USB port
// Note! The next statement will stop the sketch from running until the serial monitor is started
//       If it is not present the monitor will be missing the initial writes
//    while (!Serial) ;             // wait for serial to be established

  pinMode(RESETLINE, OUTPUT);       // Display reset pin
%%Display%%.Toggle_Reset_On ;       // *Replaced* at compile time with correct rest on logic for the attached display
  delay(100);                       // wait for it to be recognised
%%Display%%.Toggle_Reset_Off ;      // *Replaced* at compile time with correct rest off logic for the attached display
// Uncomment when using ESP8266
//  pinMode(ESPRESET, OUTPUT);        // ESP reset pin
//  digitalWrite(ESPRESET, 1);        // Reset ESP
//  delay(100);                       // wait for it t
//  digitalWrite(ESPRESET, 0);        // Release ESP reset
  delay(3000) ;                     // give display time to startup

  // now start display as Serial lines should have 'stabilised'
  %%Display%%.DisplaySerial.Begin_Speed ; // *Replaced* at compile time with command to start the serial port at the correct speed
  Display.TimeLimit4D = 5000 ;      // 5 second timeout on all commands
  Display.Callback4D = mycallback ;

// uncomment if using ESP8266
  ESPserial.begin(115200) ;         // assume esp set to 115200 baud, it's default setting
                                    // what we need to do is attempt to flip it to 19200
                                    // the maximum baud rate at which software serial actually works
                                    // if we run a program without resetting the ESP it will already be 19200
                                    // and hence the next command will not be understood or executed
  ESPserial.println("AT+UART_CUR=19200,8,1,0,0\r\n") ;
  ESPserial.end() ;
  delay(10) ;                         // Necessary to allow for baud rate changes
  ESPserial.begin(19200) ;            // start again at a resonable baud rate

  Display.gfx_ScreenMode(LANDSCAPE) ;// change manually if orientation change
  Display.putstr("Mounting...\n");
  if (!(Display.file_Mount()))
  {
    while(!(Display.file_Mount()))
    {
      Display.putstr("Drive not mounted...");
      delay(200);
      Display.gfx_Cls();
      delay(200);
    }
  }

  // put your setup code here, to run once:
  hndl = Display.file_LoadImageControl("POWERP~1.dat", "POWERP~1.gci", 1);

  Display.print("Welcome!\n");

    if (wifi.setOprToStation()) {
        Display.print("to station + softap ok\r\n");
    } else {
        Display.print("to station + softap err\r\n");
    }

    if (wifi.joinAP(SSID, PASSWORD)) {
        Display.print("Join AP success\r\n");
        Display.print("IP: ");
        Display.println(wifi.getLocalIP().c_str());
    } else {
        Display.print("Join AP failure\r\n");
    }

     if (wifi.disableMUX()) {
      Display.print("single ok\r\n");
    } else {
      Display.print("single err\r\n");
    }
  Display.print("setup end\r\n");
  delay(5000);

  Display.gfx_Cls();
  // Form1 1.1 generated 4/9/2017 7:56:05 PM
  form1();
  Display.touch_Set(TOUCH_ENABLE);
  Display.img_ClearAttributes(hndl, iWinbutton4, I_TOUCH_DISABLE); // Winbutton4 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton4);  // Winbutton4 show button, only do this once
  Display.img_ClearAttributes(hndl, i4Dbutton2, I_TOUCH_DISABLE); // 4Dbutton2 set to enable touch, only need to do this once
  Display.img_Show(hndl, i4Dbutton2);                             // 4Dbutton2 show button, only do this once
  Display.img_ClearAttributes(hndl, i4Dbutton1, I_TOUCH_DISABLE); // 4Dbutton1 set to enable touch, only need to do this once
  Display.img_Show(hndl, i4Dbutton1);                             // 4Dbutton1 show button, only do this once
} // end Setup **do not alter, remove or duplicate this line**


void loop()
{
  // put your main code here, to run repeatedly:
  word state, n, x , y;
  state = Display.touch_Get(TOUCH_STATUS);
  n = Display.img_Touched(hndl, -1);

  x = Display.touch_Get(TOUCH_GETX);
  y = Display.touch_Get(TOUCH_GETY);

  bool on = 0; //warning light bool

  float celcius = ((5.0 * analogRead(sensorPin) * 20.0) / 1024) + 2;  //signal level sampled from sensorPin is converted to a temperature value. Do calibration  if needed.
  //float tempC = celcius;
  //set thermometer picture with the correct temperature and show it
  Display.img_SetWord(hndl, iTank1, IMAGE_INDEX, celcius) ;
  Display.img_Show(hndl,iTank1) ;
   //LedDigitsDisplay(Display, hndl, celcius, iCustomdigits1+1, 24, 3, 1, 29, 0) ;  // Leddigits1
   delay(50);
   char buffer1[10];

   // =============================================================================================================================
  if(state == TOUCH_PRESSED)                        // if there's a press
  {
      // status
      if (n == iWinbutton1)
      {
        Display.img_SetWord(hndl, iWinbutton1, IMAGE_INDEX, 1); // Winbutton1 where state is 0 for up, 1 for down, 2 for 'on' up and 3 for 'on' down
        Display.img_Show(hndl,iWinbutton1) ;  // Winbutton1
        form2();
      }
      // history
      if (n == iWinbutton2)
      {
        Display.img_SetWord(hndl, iWinbutton2, IMAGE_INDEX, 1); // Winbutton1 where state is 0 for up, 1 for down, 2 for 'on' up and 3 for 'on' down
        Display.img_Show(hndl,iWinbutton2) ;  // Winbutton1
        Display.gfx_Cls();
        form3();

      }
      // settings
      if (n == iWinbutton3)
      {
        Display.img_SetWord(hndl, iWinbutton3, IMAGE_INDEX, 1); // Winbutton1 where state is 0 for up, 1 for down, 2 for 'on' up and 3 for 'on' down
        Display.img_Show(hndl,iWinbutton3) ;  // Winbutton1
        Display.gfx_Cls();
        form4();
      }
      //back to home from Status page
      if (n == iWinbutton4)
      {
        Display.img_SetWord(hndl, iWinbutton4, IMAGE_INDEX, 1); // Winbutton1 where state is 0 for up, 1 for down, 2 for 'on' up and 3 for 'on' down
        Display.img_Show(hndl,iWinbutton4) ;  // Winbutton1
        Display.gfx_Cls();
        form1();
      }
    }


}

void form1(){
  //%%Display%%.Form1 ;  // Form1

  Display.img_Show(hndl,iImage1) ;  // Image1
  Display.txt_FontID(FONT1);
  Display.txt_FGcolour(WHITE) ;
  Display.txt_BGcolour(BLACK) ;
  Display.gfx_MoveTo(260, 32) ;
  Display.putstr("Warning ") ;      // Label1
  Display.img_Show(hndl,iStatictext1) ;  // Statictext1
  //Display.img_SetWord(hndl, iTank1, IMAGE_INDEX, celcius) ; // Tank1 where frame is 0 to 170 (for a displayed -20 to 150)
  Display.img_Show(hndl,iTank1) ;  // Tank1
  //Display.img_SetWord(hndl, iUserled1, IMAGE_INDEX, on) ;      // Userled1 where numx is 0 (Off) or 1 (On)
  Display.img_Show(hndl,iUserled1) ;  // Userled1

  //code from HomeSecurity
  Display.img_Show(hndl, iWinbutton1);  // Winbutton1 show button, only do this once
  Display.img_SetWord(hndl, iWinbutton2, IMAGE_INDEX, 0);
  ////////////////////

  Display.img_Show(hndl,iWinbutton2) ;  // Winbutton2
  Display.img_SetWord(hndl, iWinbutton2, IMAGE_INDEX, 0); // Winbutton2 where state is 0 for up and 1 for down

  Display.img_Show(hndl,iWinbutton3) ;  // Winbutton3
  Display.img_SetWord(hndl, iWinbutton3, IMAGE_INDEX, 0); // Winbutton3 where state is 0 for up and 1 for down



  Display.img_Show(hndl, iCustomdigits1);  // Customdigits1 show all digits at 0, only do this once
  Display.img_Show(hndl,iTank1) ;  // Tank1 show initialy, if required
  Display.img_Show(hndl,iUserled1) ;  // Userled1 show initialy, if required
  Display.img_ClearAttributes(hndl, iWinbutton1, I_TOUCH_DISABLE); // Winbutton1 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton1);  // Winbutton1 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton2, I_TOUCH_DISABLE); // Winbutton2 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton2);  // Winbutton2 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton3, I_TOUCH_DISABLE); // Winbutton3 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton3);  // Winbutton3 show button, only do this once

}

//status page
void form2(){
  Display.gfx_Cls();
  Display.img_Show(hndl,iStatictext2) ;  // Statictext2
  Display.img_SetWord(hndl, iWinbutton4, IMAGE_INDEX, 0); // Winbutton4 where state is 0 for up and 1 for down
  Display.img_Show(hndl,iWinbutton4) ;  // Winbutton4


  Display.img_ClearAttributes(hndl, iWinbutton4, I_TOUCH_DISABLE); // Winbutton4 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton4);  // Winbutton4 show button, only do this once
}

//history
void form3(){
  Display.gfx_Cls();
  uint16_t xx, yy; //xx is value, yy is time

  xx = 59;
  yy = 59;

  //Display.drawPixel(xx, yy, RED); //wrong syntax?
  //Display.gfx_PutPixel(xx, yy, RED);            // set point at x y

  Display.img_SetWord(hndl, iWinbutton4, IMAGE_INDEX, 0); // Winbutton4 where state is 0 for up and 1 for down


  Display.img_ClearAttributes(hndl, iWinbutton4, I_TOUCH_DISABLE); // Winbutton4 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton4);  // Winbutton4 show button, only do this once


}

//settings
void form4(){
  Display.gfx_Cls();
  //in main code add if slider increase, increase brightness and vice versa
  Display.img_Show(hndl,iStatictext3) ;  // Statictext3
  Display.img_Show(hndl,iStatictext4) ;  // Statictext4

  Display.img_SetWord(hndl, iWinbutton4, IMAGE_INDEX, 0); // Winbutton4 where state is 0 for up and 1 for down
  Display.img_SetWord(hndl, i4Dbutton2, IMAGE_INDEX, 0); // 4Dbutton2 where state is 0 for up, 1 for down, 2 for 'on' up and 3 for 'on' down
  Display.img_ClearAttributes(hndl, i4Dbutton2, I_TOUCH_DISABLE); // Winbutton4 set to enable touch, only need to do this once
  Display.img_Show(hndl,i4Dbutton2) ;  // 4Dbutton2
  Display.img_SetWord(hndl, i4Dbutton1, IMAGE_INDEX, 0); // 4Dbutton1 where state is 0 for up and 1 for down
  Display.img_ClearAttributes(hndl, i4Dbutton1, I_TOUCH_DISABLE); // Winbutton4 set to enable touch, only need to do this once
  Display.img_Show(hndl,i4Dbutton1) ;  // 4Dbutton1



  Display.img_ClearAttributes(hndl, iWinbutton4, I_TOUCH_DISABLE); // Winbutton4 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton4);  // Winbutton4 show button, only do this once

}


void updateVals(String volt, String curr ){

   if (wifi.createTCP(IP, (80))) {
     //   Display.print("create tcp ok \r\n");
     //Display.print(field);
    } else {
     //   Display.print("create tcp err\r\n");
    }

  String cmd = GET;
  cmd += volt;
  cmd += GET_end2;
  cmd += curr;
  cmd += "\r\n";

  ESPserial.print("AT+CIPSEND=");
  ESPserial.println(cmd.length());
  if(ESPserial.find(">")){
    Serial.print(">");
    Serial.print(cmd);
    ESPserial.print(cmd);
  }

  if(ESPserial.find("OK")){
    Serial.println("RECEIVED: OK");
  }else{
    Serial.println("RECEIVED: Error");
  }

  if (wifi.releaseTCP()) {
    //Display.print("release tcp ok \r\n");
  } else {
    //Display.print("release tcp err\r\n");
  }
}

